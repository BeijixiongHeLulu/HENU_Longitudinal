GLOBAL:
  seed: &seed 42
  n_jobs: &n_jobs -1
  o_sfreqs: &o_sfreq 500
  FOLDER_PATH: &FOLDER_PATH /data/xiaowei/social_network/HENU
DATASET:
  SURVEY:
    final_file_path: final.xlsx
    midterm_file_path: midterm.xlsx
    social_network_file_path: Social_network_V2.xlsx
  EEG:
    preload: False
    check_data: auto #auto or manually set a list of subj id


PROCESSING:
  PREPROCESSING:
    DO: False
    SAVE_PATH: &EPOCH_PATH !join [*FOLDER_PATH, /preprocessing]
    n_jobs: *n_jobs
    CHANNEL:
      montageName: !join [*FOLDER_PATH, /data/standard-10-5-cap385.elp]
      channelTypes: {}
      dropChannel: [IO,]
      mapping: {}
    CROP:
      DO: True
      tmin: 30
      tmax: 330
    RESAMPLE:
      DO: False
      sfreq: 500
    FILTER:
      DO: True
      hp: &hp 8
      lp: &lp 14
    NOTCH_FILTER:
      DO: True
      freq: 50
    REREFERENCE:
      DO: True
      ref_channels: 'average' # a list of channel names, or average 
    EPOCH:
      DurationTime: 2
      MarkName: &event_name T
    ICA:
      DO: True
      seed: *seed
    REJECT:
      DO: True
  FEATURE_EXTRACTION:
    EPOCH_PATH: *EPOCH_PATH
    SAVE_PATH: &FEATURE_PATH !join [*FOLDER_PATH, /EEG_features]
    PSD: &PSD
      DO: True
      fmin: *hp
      fmax: *lp
      n_jobs: *n_jobs
    FUNCTIONALCONNECTIVITY: &FUNCTIONALCONNECTIVITY
      DO: True
      method: [coh, cohy, imcoh, plv, ciplv, ppc, pli, wpli, wpli2_debiased]
      sfreq: *o_sfreq
      fmin: *hp
      fmax: *lp
      faverage: True
      n_jobs: *n_jobs
      
  EEG_SOCIAL_NETWORK:
    DO: False
    SAVE_PATH: !join [*FOLDER_PATH, /EEG_SN]
    FEATURE: {'PSD': *FEATURE_PATH}
    EPOCH_PATH: *EPOCH_PATH 
    VISUALIZATION: True

  # TODO: add the following processing steps
  SURVEY_SOCIAL_NETWORK:
    DO: False
    SAVE_PATH: !join [*FOLDER_PATH, /survey_SN]
    EPOCH_PATH: *EPOCH_PATH 
    VISUALIZATION: True
  


REGRESSION:
  EEG_OVO:
    DO: True
    SAVE_PATH: !join [*FOLDER_PATH, /EEG_regression]
    EEG_FEATURE: {'PSD': *PSD, 'FUNCTIONALCONNECTIVITY': *FUNCTIONALCONNECTIVITY}
    EEG_FEATURE_PATH: *FEATURE_PATH
    PRETRAIN: True
    CHANNEL_SELECION: channel # all,channel, or a list of channel idx
    
    MODEL:
      model_type: LinearRegression
      standardize: True
      test_rate: 0.2
      split_random_state: *seed
      kwargs: {n_jobs: *n_jobs}
      VISUALIZATION: True

    # MODEL:
    #   model_type: Ridge
    #   standardize: True
    #   test_rate: 0.2
    #   split_random_state: *seed
    #   kwargs: {random_state: *seed}
    #   VISUALIZATION: True

    # MODEL:
    #   model_type: svm.SVR
    #   standardize: True
    #   test_rate: 0.2
    #   split_random_state: *seed
    #   kwargs: {kernel: rbf,cache_size: 1000}
    #   VISUALIZATION: True
    # MODEL:
    #   model_type: XGBRegressor
    #   standardize: True
    #   test_rate: 0.2
    #   split_random_state: *seed
    #   kwargs: {verbosity: 0, objective: reg:squarederror}
    #   VISUALIZATION: True
    
  

  SURVEY_OVO:
    DO: False
    SAVE_PATH: !join [*FOLDER_PATH, /SURVEY_regression]
    SURVEY_FEATURE: 
      final: all # all or a list of variable names
      midterm: all # all or a list of variable names
    METHOD_WAY:
      method: ovo # ovo: test all possible combinations of methods, or a dict of {term: [features,],}
      n_feature: [1,2,3]
      # all, list
      # e.g. 1 means: try every feature to predict the relationship. 2 means: try every pair of features to predict the relationship.
      # all means: try every combination of features to predict the relationship. !!!! OUT OF MEMORY !!!! NOT RECOMMENDED !!!
      # list means: try every combination of features in the list to predict the relationship.
    PRETRAIN: True
    # MODEL:
    #   model_type: LinearRegression
    #   standardize: True
    #   test_rate: 0.2
    #   split_random_state: *seed
    #   kwargs: {n_jobs: *n_jobs}
    #   VISUALIZATION: False
      # MODEL:
      #   model_type: Ridge
      #   standardize: True
      #   test_rate: 0.2
      #   split_random_state: *seed
      #   kwargs: {random_state: *seed}
      #   VISUALIZATION: True
      # MODEL:
      #   model_type: svm.SVR
      #   standardize: True
      #   test_rate: 0.2
      #   split_random_state: *seed
      #   kwargs: {kernel: rbf,cache_size: 1000}
      #   VISUALIZATION: True
    MODEL:
      model_type: XGBRegressor
      standardize: True
      test_rate: 0.2
      split_random_state: *seed
      kwargs: {verbosity: 0, objective: reg:squarederror, n_jobs: *n_jobs, random_state: *seed}
      VISUALIZATION: True

    


      
    
